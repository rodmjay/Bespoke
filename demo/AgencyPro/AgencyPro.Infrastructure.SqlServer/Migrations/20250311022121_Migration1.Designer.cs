// <auto-generated />
using System;
using AgencyPro.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgencyPro.Infrastructure.SqlServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250311022121_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgencyPro.Domain.Entities.AccountCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountCard");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.AccountManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AccountManager");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BillingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStoryBucket")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BillingCategory");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BonusTransfer", b =>
                {
                    b.Property<string>("TransferId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransferId");

                    b.ToTable("BonusTransfer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BuyerAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Delinquent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BuyerAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsContacted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceState")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal>("RecruiterBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruiterOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RecruiterStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RejectionDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RejectionReason")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProviderOrganizationId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("ProjectManagerOrganizationId", "ProjectManagerId");

                    b.HasIndex("RecruiterOrganizationId", "RecruiterId");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CandidateNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("AccountManagerTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Account Manager");

                    b.Property<string>("AccountManagerTitlePlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Account Managers");

                    b.Property<string>("ContractorTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Contractor");

                    b.Property<string>("ContractorTitlePlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Contractors");

                    b.Property<string>("CustomerTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Customer");

                    b.Property<string>("CustomerTitlePlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Customers");

                    b.Property<decimal>("DefaultAccountManagerStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(5m);

                    b.Property<decimal>("DefaultAgencyStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(15m);

                    b.Property<decimal>("DefaultContractorStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(25m);

                    b.Property<decimal>("DefaultMarketerBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(10m);

                    b.Property<decimal>("DefaultMarketerStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(2.5m);

                    b.Property<decimal>("DefaultMarketingAgencyBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(10m);

                    b.Property<decimal>("DefaultMarketingAgencyStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1m);

                    b.Property<decimal>("DefaultProjectManagerStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(7.5m);

                    b.Property<decimal>("DefaultRecruiterStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(2.5m);

                    b.Property<decimal>("DefaultRecruitingAgencyStream")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(2m);

                    b.Property<string>("MarketerTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Marketer");

                    b.Property<string>("MarketerTitlePlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Marketers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectManagerTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Project Manager");

                    b.Property<string>("ProjectManagerTitlePlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Project Managers");

                    b.Property<string>("RecruiterTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Recruiter");

                    b.Property<string>("RecruiterTitlePlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Recruiters");

                    b.Property<bool>("Searchable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StoryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoryTitlePlural")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategoryBillingCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BillingCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "BillingCategoryId");

                    b.HasIndex("BillingCategoryId");

                    b.ToTable("CategoryBillingCategory");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategoryPaymentTerm", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "PaymentTermId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("CategoryPaymentTerm");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategoryPosition", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("CategoryPosition");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategorySkill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategorySkill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Internal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ContractId");

                    b.HasIndex("LeadId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StoryId");

                    b.HasIndex("OrganizationId", "CreatedById");

                    b.HasIndex("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset?>("AccountManagerEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AccountManagerPauseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("AccountManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("AgencyOwnerEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AgencyOwnerPauseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("AgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BuyerNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("BuyerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ContractorEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractorOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ContractorPauseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("ContractorStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CustomerEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CustomerPauseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("CustomerRate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[ContractorStream]+[RecruiterStream]+[ProjectManagerStream]+[AccountManagerStream]+[MarketerStream]+[AgencyStream]+[MarketingAgencyStream]+[RecruitingAgencyStream]+[SystemStream]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("case when (coalesce([AgencyOwnerEndDate],[AccountManagerEndDate],[ContractorEndDate],[CustomerEndDate]) is null) then cast(0 as bit) else cast(1 as bit) end");

                    b.Property<bool>("IsPaused")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("case when (coalesce([AgencyOwnerPauseDate],[AccountManagerPauseDate],[ContractorPauseDate],[CustomerPauseDate]) is null) then cast(0 as bit) else cast(1 as bit) end");

                    b.Property<Guid>("MarketerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MarketingNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxAccountManagerWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([AccountManagerStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxAgencyWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([AgencyStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxContractorWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([ContractorStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxCustomerWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([ContractorStream]+[RecruiterStream]+[ProjectManagerStream]+[AccountManagerStream]+[MarketerStream]+[AgencyStream]+[MarketingAgencyStream]+[RecruitingAgencyStream]+[SystemStream])*[MaxWeeklyHours]");

                    b.Property<decimal>("MaxMarketerWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([MarketerStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxMarketingAgencyWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([MarketingAgencyStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxProjectManagerWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([ProjectManagerStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxRecruiterWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([RecruiterStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxRecruitingAgencyWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([RecruitingAgencyStream]*[MaxWeeklyHours])");

                    b.Property<decimal>("MaxSystemWeekly")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([SystemStream]*[MaxWeeklyHours])");

                    b.Property<int>("MaxWeeklyHours")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProjectManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProviderNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruiterOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RecruiterStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecruitingNumber")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SystemStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalHoursLogged")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProviderOrganizationId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("AccountManagerOrganizationId", "AccountManagerId");

                    b.HasIndex("ContractorOrganizationId", "ContractorId");

                    b.HasIndex("ContractorOrganizationId", "ProviderNumber")
                        .IsUnique()
                        .HasDatabaseName("ContractProviderNumberIndex");

                    b.HasIndex("MarketerOrganizationId", "MarketerId");

                    b.HasIndex("MarketerOrganizationId", "MarketingNumber")
                        .IsUnique()
                        .HasDatabaseName("ContractMarketingNumberIndex");

                    b.HasIndex("ProjectManagerOrganizationId", "ProjectManagerId");

                    b.HasIndex("RecruiterOrganizationId", "RecruiterId");

                    b.HasIndex("RecruiterOrganizationId", "RecruitingNumber")
                        .IsUnique()
                        .HasDatabaseName("ContractRecruitingNumberIndex");

                    b.HasIndex("BuyerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ContractNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Contractor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("HoursAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(40);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastWorkedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruiterOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("RecruiterOrganizationId", "RecruiterId");

                    b.ToTable("Contractor");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ContractorSkill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SelfAssessment")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "ContractorId");

                    b.HasIndex("ContractorId");

                    b.ToTable("ContractorSkill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MarketerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MarketerOrganizationId", "MarketerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CustomerAccount", b =>
                {
                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AccountManagerDeactivationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AgencyOwnerDeactivationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("AutoApproveTimeEntries")
                        .HasColumnType("bit");

                    b.Property<int>("BuyerNumber")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CustomerDeactivationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCorporate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("case when [AccountManagerOrganizationId]=[CustomerOrganizationId] AND [AccountManagerId]=[CustomerId] then cast(1 as bit) else cast(0 as bit) end");

                    b.Property<bool>("IsDeactivated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("case when (coalesce([AgencyOwnerDeactivationDate],[AccountManagerDeactivationDate],[CustomerDeactivationDate]) is null) then cast(0 as bit) else cast(1 as bit) end");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("case when [AccountManagerOrganizationId]=[CustomerOrganizationId] then cast(1 as bit) else cast(0 as bit) end");

                    b.Property<decimal>("MarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("AccountManagerOrganizationId", "AccountManagerId");

                    b.HasIndex("AccountManagerOrganizationId", "Number")
                        .IsUnique()
                        .HasDatabaseName("AccountNumberIndex");

                    b.HasIndex("CustomerOrganizationId", "BuyerNumber")
                        .IsUnique()
                        .HasDatabaseName("BuyerNumberIndex");

                    b.ToTable("CustomerAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CustomerCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CustomerEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCard");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.FinancialAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardIssuingCapabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPaymentsCapabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChargesEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PayoutsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripePublishableKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransfersCapabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("FinancialAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.FixedPriceProposal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgreementText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BudgetBasis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CustomerRateBasis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DailyCapacity")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(([WeeklyMaxHourBasis] * [VelocityBasis]) / 7)");

                    b.Property<int>("EstimationBasis")
                        .HasColumnType("int");

                    b.Property<int>("ExtraDayBasis")
                        .HasColumnType("int");

                    b.Property<decimal>("OtherPercentBasis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ProposalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("RetainerPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoryHours")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("([StoryPointBasis]*[EstimationBasis])");

                    b.Property<int>("StoryPointBasis")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDays")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(((([StoryPointBasis]*[EstimationBasis]) * (1 + [OtherPercentBasis]))/(([WeeklyMaxHourBasis] * [VelocityBasis]) / 7))+[ExtraDayBasis])");

                    b.Property<decimal>("TotalHours")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(([StoryPointBasis]*[EstimationBasis]) * (1 + [OtherPercentBasis]))");

                    b.Property<decimal>("TotalPriceQuoted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("((([StoryPointBasis]*[EstimationBasis]) * (1 + [OtherPercentBasis])) * [CustomerRateBasis])");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VelocityBasis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1m);

                    b.Property<decimal>("WeeklyCapacity")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([WeeklyMaxHourBasis] * [VelocityBasis])");

                    b.Property<decimal>("WeeklyMaxHourBasis")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Proposal", (string)null);
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualBonusIntent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BonusType")
                        .HasColumnType("int");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique()
                        .HasFilter("[CandidateId] IS NOT NULL");

                    b.HasIndex("LeadId")
                        .IsUnique()
                        .HasFilter("[LeadId] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.HasIndex("TransferId");

                    b.HasIndex("OrganizationId", "PersonId");

                    b.ToTable("IndividualBonusIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualBuyerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerAccountId")
                        .IsUnique();

                    b.ToTable("IndividualBuyerAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualFinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinancialAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId")
                        .IsUnique();

                    b.ToTable("IndividualFinancialAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualPayoutIntent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceTransferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoiceItemId");

                    b.HasIndex("InvoiceTransferId");

                    b.HasIndex("PersonId");

                    b.HasIndex("OrganizationId", "PersonId");

                    b.ToTable("IndividualPayoutIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.InvoiceTransfer", b =>
                {
                    b.Property<string>("TransferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransferId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceTransfer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CallbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsContacted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("case when [MarketerOrganizationId]=[ProviderOrganizationId] then cast(1 as bit) else cast(0 as bit) end");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MarketerBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("MarketerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeetingNotes")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceState")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("ProviderOrganizationId");

                    b.HasIndex("AccountManagerOrganizationId", "AccountManagerId");

                    b.HasIndex("MarketerOrganizationId", "MarketerId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.LeadNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Marketer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Marketer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.MarketingAgreement", b =>
                {
                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketingOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InitiatedByProvider")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketerBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MarketerInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingBonus")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[MarketerBonus]+[MarketingAgencyBonus]");

                    b.Property<decimal>("MarketingStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[MarketingAgencyStream]+[MarketerStream]");

                    b.Property<bool>("RequireUniqueEmail")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProviderOrganizationId", "MarketingOrganizationId");

                    b.HasIndex("MarketingOrganizationId");

                    b.ToTable("MarketingAgreement");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.MarketingOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CombinedMarketingBonus")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[MarketerBonus]+[MarketingAgencyBonus]+[ServiceFeePerLead]");

                    b.Property<decimal>("CombinedMarketingStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[MarketerStream]+[MarketingAgencyStream]");

                    b.Property<Guid>("DefaultMarketerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Discoverable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketerBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceFeePerLead")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "DefaultMarketerId");

                    b.ToTable("MarketingOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveItemColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActiveItemTextColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivePresenceColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffiliateInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnBgColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoverItemColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionBadgeColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MenuBgHoverColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TertiaryColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationAccountManager", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AccountManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "AccountManagerId");

                    b.HasIndex("AccountManagerId");

                    b.ToTable("OrganizationAccountManager");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationBillingCategory", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BillingCategoryId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "BillingCategoryId");

                    b.HasIndex("BillingCategoryId");

                    b.ToTable("OrganizationBillingCategory");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationBonusIntent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BonusType")
                        .HasColumnType("int");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique()
                        .HasFilter("[CandidateId] IS NOT NULL");

                    b.HasIndex("LeadId")
                        .IsUnique()
                        .HasFilter("[LeadId] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TransferId");

                    b.ToTable("OrganizationBonusIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationBuyerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerAccountId")
                        .IsUnique();

                    b.ToTable("OrganizationBuyerAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationContractor", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoApproveTimeEntries")
                        .HasColumnType("bit");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractorStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioMediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "ContractorId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PositionId");

                    b.ToTable("OrganizationContractor");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationCustomer", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrganizationCustomer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationFinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinancialAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId")
                        .IsUnique();

                    b.ToTable("OrganizationFinancialAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationMarketer", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketerBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "MarketerId");

                    b.HasIndex("MarketerId");

                    b.ToTable("OrganizationMarketer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPaymentTerm", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("OrganizationId", "PaymentTermId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("OrganizationPaymentTerm");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPayoutIntent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AgencyOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceTransferId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoiceItemId");

                    b.HasIndex("InvoiceTransferId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationPayoutIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPerson", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffiliateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyFlags")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizationOwner")
                        .HasColumnType("bit");

                    b.Property<long>("PersonFlags")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("OrganizationPerson");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPosition", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("OrganizationPosition");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationProjectManager", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProjectManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "ProjectManagerId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("OrganizationProjectManager");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationRecruiter", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("RecruiterBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruiterStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId", "RecruiterId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("OrganizationRecruiter");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationSetting", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("SectionType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MenuType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("OrganizationId", "SectionType", "MenuType");

                    b.ToTable("OrganizationSetting");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationSkill", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrganizationId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("OrganizationSkill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StripeSubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StripeSubscriptionId")
                        .IsUnique();

                    b.ToTable("OrganizationSubscription");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTermId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NetValue")
                        .HasColumnType("int");

                    b.HasKey("PaymentTermId");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("DetailsSubmitted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]");

                    b.Property<long?>("DobDay")
                        .HasColumnType("bigint");

                    b.Property<long?>("DobMonth")
                        .HasColumnType("bigint");

                    b.Property<long?>("DobYear")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasDefaultValue("US");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MaidenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceState")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TosAcceptance")
                        .HasColumnType("bit");

                    b.Property<string>("TosIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TosShownAndAcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TosUserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.PersonNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.PremiumOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PremiumOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoApproveTimeEntries")
                        .HasColumnType("bit");

                    b.Property<Guid>("BuyerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("BuyerOrganizationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("AccountManagerOrganizationId", "Abbreviation")
                        .IsUnique()
                        .HasDatabaseName("ProjectAbbreviationIndex");

                    b.HasIndex("AccountManagerOrganizationId", "AccountManagerId");

                    b.HasIndex("ProjectManagerOrganizationId", "ProjectManagerId");

                    b.HasIndex("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectBillingCategory", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BillingCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "BillingCategoryId");

                    b.HasIndex("BillingCategoryId");

                    b.ToTable("ProjectBillingCategory");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectInvoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProviderOrganizationId", "AccountManagerId");

                    b.HasIndex("ProviderOrganizationId", "ProjectManagerId");

                    b.HasIndex("BuyerOrganizationId", "CustomerId", "ProviderOrganizationId", "AccountManagerId");

                    b.ToTable("ProjectInvoice");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectInvoiceAdditionalExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("ProjectInvoiceAdditionalExpense");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectManager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ProjectManager");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectRetainerIntent", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TopOffAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProjectId");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProviderOrganizationId", "AccountManagerId");

                    b.HasIndex("CustomerOrganizationId", "CustomerId", "ProviderOrganizationId", "AccountManagerId");

                    b.ToTable("ProjectRetainerIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProposalAcceptance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcceptedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AcceptedCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AgreementText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CustomerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NetTerms")
                        .HasColumnType("int");

                    b.Property<string>("ProposalBlob")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProposalType")
                        .HasColumnType("int");

                    b.Property<decimal?>("RetainerAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Velocity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerOrganizationId", "CustomerId");

                    b.ToTable("ProposalAcceptance");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProposalNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProposalWorkOrder", b =>
                {
                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkOrderId", "ProposalId");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalWorkOrder");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProviderOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountManagerInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AccountManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("AutoApproveTimeEntries")
                        .HasColumnType("bit");

                    b.Property<string>("ContractorInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ContractorStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DefaultAccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Discoverable")
                        .HasColumnType("bit");

                    b.Property<int>("EstimationBasis")
                        .HasColumnType("int");

                    b.Property<int>("FutureDaysAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MarketerInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreviousDaysAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(14);

                    b.Property<string>("ProjectManagerInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProjectManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProviderInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecruiterInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SystemStream")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "DefaultAccountManagerId");

                    b.HasIndex("Id", "DefaultContractorId");

                    b.HasIndex("Id", "DefaultProjectManagerId");

                    b.ToTable("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Recruiter");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.RecruitingAgreement", b =>
                {
                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruitingOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InitiatedByProvider")
                        .HasColumnType("bit");

                    b.Property<decimal>("RecruiterBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecruiterInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RecruiterStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingBonus")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[RecruitingAgencyBonus]+[RecruiterBonus]");

                    b.Property<decimal>("RecruitingStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[RecruitingAgencyStream]+[RecruiterStream]");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProviderOrganizationId", "RecruitingOrganizationId");

                    b.HasIndex("RecruitingOrganizationId");

                    b.ToTable("RecruitingAgreement");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.RecruitingOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CombinedRecruitingBonus")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[RecruiterBonus]+[RecruitingAgencyBonus]+[ServiceFeePerLead]");

                    b.Property<decimal>("CombinedRecruitingStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[RecruiterStream]+[RecruitingAgencyStream]");

                    b.Property<Guid>("DefaultRecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Discoverable")
                        .HasColumnType("bit");

                    b.Property<decimal>("RecruiterBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruiterStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RecruitingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceFeePerLead")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "DefaultRecruiterId");

                    b.ToTable("RecruitingOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ServiceAgreement", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.HasIndex("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId")
                        .IsUnique();

                    b.ToTable("ServiceAgreement");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AssignedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CustomerAcceptanceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("CustomerApprovedHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProjectManagerAcceptanceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoryPoints")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoryTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalHoursLogged")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ContractorOrganizationId", "ContractorId");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StoryNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeBalanceTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AvailableOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Net")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayoutId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PayoutId");

                    b.ToTable("StripeBalanceTransaction");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CvcCheck")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DynamicLast4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Funding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Last4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("StripeCard");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeCharge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BalanceTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Captured")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Disputed")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OnBehalfOfId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeNetworkStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeRiskLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OutcomeRiskScore")
                        .HasColumnType("bigint");

                    b.Property<string>("OutcomeSellerMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiptEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Refunded")
                        .HasColumnType("bit");

                    b.Property<string>("StatementDescriptor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatementDescriptorSuffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentIntentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StripeCharge");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeCheckoutSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("StripeCheckoutSession");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AttemptCount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Attempted")
                        .HasColumnType("bit");

                    b.Property<bool>("AutomaticCollection")
                        .HasColumnType("bit");

                    b.Property<string>("BillingReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("EndingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HostedInvoiceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicePdf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("StripeInvoice");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("StripeInvoiceItem");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoiceLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discountable")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoiceItemId");

                    b.ToTable("StripeInvoiceLine");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripePaymentIntent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountCapturable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountReceived")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CaptureMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TransferGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("StripePaymentIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripePayout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ArrivalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Automatic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("StripePayout");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeSource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Flow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("StripeSource");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CancelAtPeriodEnd")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrialEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StripeSubscription");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeSubscriptionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("StripeSubscriptionItem");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeTransfer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountReversed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DestinationPaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("StripeTransfer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.SystemNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SystemNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.TimeEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("InstantAccountManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantContractorStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantMarketerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantMarketingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantProjectManagerStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantRecruiterStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantRecruitingAgencyStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstantSystemStream")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarketerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketingAgencyOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketingOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderAgencyOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruitingAgencyOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecruitingOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAccountManagerStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantAccountManagerStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalAgencyStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantAgencyStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalContractorStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantContractorStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalCustomerAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([InstantSystemStream]+[InstantAccountManagerStream]+[InstantProjectManagerStream]+[InstantMarketerStream]+[InstantRecruiterStream]+[InstantContractorStream]+[InstantAgencyStream]+[InstantRecruitingAgencyStream]+[InstantMarketingAgencyStream])*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalHours")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalMarketerStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantMarketerStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalMarketingAgencyStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantMarketingAgencyStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalMarketingStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([InstantMarketingAgencyStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0))+([InstantMarketerStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0))");

                    b.Property<int>("TotalMinutes")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("DATEDIFF(minute, [StartDate], [EndDate])");

                    b.Property<decimal>("TotalProjectManagerStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantProjectManagerStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalRecruiterStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantRecruiterStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalRecruitingAgencyStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantRecruitingAgencyStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<decimal>("TotalRecruitingStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([InstantRecruitingAgencyStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0))+([InstantRecruiterStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0))");

                    b.Property<decimal>("TotalSystemStream")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[InstantSystemStream]*(DATEDIFF(second, [StartDate], [EndDate]) / 3600.0)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceItemId");

                    b.HasIndex("MarketerId");

                    b.HasIndex("MarketingAgencyOwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProviderAgencyOwnerId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("RecruitingAgencyOwnerId");

                    b.HasIndex("StoryId");

                    b.HasIndex("TimeType");

                    b.HasIndex("CustomerOrganizationId", "CustomerId");

                    b.HasIndex("MarketingOrganizationId", "MarketerId");

                    b.HasIndex("ProviderOrganizationId", "AccountManagerId");

                    b.HasIndex("ProviderOrganizationId", "ContractorId");

                    b.HasIndex("ProviderOrganizationId", "ProjectManagerId");

                    b.HasIndex("RecruitingOrganizationId", "RecruiterId");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.TimeEntryNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<Guid>("TimeEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TimeEntryId");

                    b.ToTable("TimeEntryNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendMail")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountManagerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyerNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("BuyerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderNumber")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ProviderResponseTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("BuyerOrganizationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("AccountManagerOrganizationId", "AccountManagerId");

                    b.HasIndex("AccountManagerOrganizationId", "ProviderNumber")
                        .IsUnique()
                        .HasDatabaseName("ProviderNumberIndex");

                    b.HasIndex("CustomerOrganizationId", "BuyerNumber")
                        .IsUnique()
                        .HasDatabaseName("BuyerNumberIndex");

                    b.HasIndex("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.WorkOrderNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgement")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderNotification");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.AccountCard", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.FinancialAccount", "FinancialAccount")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripeCard", "StripeCard")
                        .WithOne("AccountCard")
                        .HasForeignKey("AgencyPro.Domain.Entities.AccountCard", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("StripeCard");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.AccountManager", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("AccountManager")
                        .HasForeignKey("AgencyPro.Domain.Entities.AccountManager", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BonusTransfer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeTransfer", "Transfer")
                        .WithOne("BonusTransfer")
                        .HasForeignKey("AgencyPro.Domain.Entities.BonusTransfer", "TransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.ProjectManager", "ProjectManager")
                        .WithMany("Candidates")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("Candidates")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Recruiter", "Recruiter")
                        .WithMany("Candidates")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "RecruiterOrganization")
                        .WithMany("Candidates")
                        .HasForeignKey("RecruiterOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationProjectManager", "OrganizationProjectManager")
                        .WithMany("Candidates")
                        .HasForeignKey("ProjectManagerOrganizationId", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationRecruiter", "OrganizationRecruiter")
                        .WithMany("Candidates")
                        .HasForeignKey("RecruiterOrganizationId", "RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrganizationProjectManager");

                    b.Navigation("OrganizationRecruiter");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProviderOrganization");

                    b.Navigation("Recruiter");

                    b.Navigation("RecruiterOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CandidateNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateNotifications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategoryBillingCategory", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BillingCategory", "BillingCategory")
                        .WithMany("CategoryBillingCategories")
                        .HasForeignKey("BillingCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Category", "Category")
                        .WithMany("AvailableBillingCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillingCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategoryPaymentTerm", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Category", "Category")
                        .WithMany("AvailablePaymentTerms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany("CategoryPaymentTerms")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategoryPosition", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Category", "Category")
                        .WithMany("Positions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Position", "Position")
                        .WithMany("Categories")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CategorySkill", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Category", "Category")
                        .WithMany("AvailableSkills")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Skill", "Skill")
                        .WithMany("SkillCategories")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Candidate", "Candidate")
                        .WithMany("Comments")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Contract", "Contract")
                        .WithMany("Comments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Lead", "Lead")
                        .WithMany("Comments")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Story", null)
                        .WithMany("Comments")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("OrganizationId", "CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Candidate");

                    b.Navigation("Contract");

                    b.Navigation("Creator");

                    b.Navigation("CustomerAccount");

                    b.Navigation("Lead");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Contract", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("Contracts")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "BuyerOrganization")
                        .WithMany("BuyerContracts")
                        .HasForeignKey("BuyerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Contractor", "Contractor")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Marketer", "Marketer")
                        .WithMany("Contracts")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.MarketingOrganization", "MarketerOrganization")
                        .WithMany("MarketerContracts")
                        .HasForeignKey("MarketerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("Contracts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProjectManager", "ProjectManager")
                        .WithMany("Contracts")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("Contracts")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Recruiter", "Recruiter")
                        .WithMany("Contracts")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.RecruitingOrganization", "RecruiterOrganization")
                        .WithMany("RecruiterContracts")
                        .HasForeignKey("RecruiterOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("Contracts")
                        .HasForeignKey("AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("Contracts")
                        .HasForeignKey("BuyerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationContractor", "OrganizationContractor")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractorOrganizationId", "ContractorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationMarketer", "OrganizationMarketer")
                        .WithMany("Contracts")
                        .HasForeignKey("MarketerOrganizationId", "MarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationProjectManager", "OrganizationProjectManager")
                        .WithMany("Contracts")
                        .HasForeignKey("ProjectManagerOrganizationId", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationRecruiter", "OrganizationRecruiter")
                        .WithMany("Contracts")
                        .HasForeignKey("RecruiterOrganizationId", "RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("Contracts")
                        .HasForeignKey("BuyerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountManager");

                    b.Navigation("BuyerOrganization");

                    b.Navigation("Contractor");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAccount");

                    b.Navigation("Marketer");

                    b.Navigation("MarketerOrganization");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationContractor");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("OrganizationMarketer");

                    b.Navigation("OrganizationProjectManager");

                    b.Navigation("OrganizationRecruiter");

                    b.Navigation("Project");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProviderOrganization");

                    b.Navigation("Recruiter");

                    b.Navigation("RecruiterOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ContractNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Contract", "Contract")
                        .WithMany("Notifications")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Contractor", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("Contractor")
                        .HasForeignKey("AgencyPro.Domain.Entities.Contractor", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Recruiter", "Recruiter")
                        .WithMany("Contractors")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationRecruiter", "OrganizationRecruiter")
                        .WithMany("Contractors")
                        .HasForeignKey("RecruiterOrganizationId", "RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OrganizationRecruiter");

                    b.Navigation("Person");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ContractorSkill", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Contractor", "Contractor")
                        .WithMany("ContractorSkills")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Skill", "Skill")
                        .WithMany("ContractorSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Customer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("AgencyPro.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationMarketer", "OrganizationMarketer")
                        .WithMany("Customers")
                        .HasForeignKey("MarketerOrganizationId", "MarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrganizationMarketer");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CustomerAccount", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("AccountManagerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "BuyerOrganization")
                        .WithMany("BuyerCustomerAccounts")
                        .HasForeignKey("CustomerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountManager");

                    b.Navigation("BuyerOrganization");

                    b.Navigation("Customer");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("PaymentTerm");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CustomerCard", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Customer", "CustomerEntity")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerEntityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "Customer")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripeCard", "StripeCard")
                        .WithOne("CustomerCard")
                        .HasForeignKey("AgencyPro.Domain.Entities.CustomerCard", "Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("CustomerEntity");

                    b.Navigation("StripeCard");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.FixedPriceProposal", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithOne("Proposal")
                        .HasForeignKey("AgencyPro.Domain.Entities.FixedPriceProposal", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualBonusIntent", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Candidate", "Candidate")
                        .WithOne("IndividualBonusIntent")
                        .HasForeignKey("AgencyPro.Domain.Entities.IndividualBonusIntent", "CandidateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Lead", "Lead")
                        .WithOne("IndividualBonusIntent")
                        .HasForeignKey("AgencyPro.Domain.Entities.IndividualBonusIntent", "LeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithMany("BonusIntents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.BonusTransfer", "BonusTransfer")
                        .WithMany("IndividualBonusIntents")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithMany("BonusIntents")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BonusTransfer");

                    b.Navigation("Candidate");

                    b.Navigation("Lead");

                    b.Navigation("OrganizationPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualBuyerAccount", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "BuyerAccount")
                        .WithOne("IndividualBuyerAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.IndividualBuyerAccount", "BuyerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithOne("BuyerAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.IndividualBuyerAccount", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerAccount");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualFinancialAccount", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.FinancialAccount", "FinancialAccount")
                        .WithOne("IndividualFinancialAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.IndividualFinancialAccount", "FinancialAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("IndividualFinancialAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.IndividualFinancialAccount", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.IndividualPayoutIntent", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithMany("IndividualPayoutIntents")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoiceItem", "InvoiceItem")
                        .WithMany("IndividualPayoutIntents")
                        .HasForeignKey("InvoiceItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.InvoiceTransfer", "InvoiceTransfer")
                        .WithMany("IndividualPayoutIntents")
                        .HasForeignKey("InvoiceTransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("IndividualPayoutIntents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithMany("PayoutIntents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithMany("Payouts")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceItem");

                    b.Navigation("InvoiceTransfer");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.InvoiceTransfer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithMany("InvoiceTransfers")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripeTransfer", "Transfer")
                        .WithOne("InvoiceTransfer")
                        .HasForeignKey("AgencyPro.Domain.Entities.InvoiceTransfer", "TransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Invoice");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Lead", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("Leads")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Marketer", "Marketer")
                        .WithMany("Leads")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "MarketerOrganization")
                        .WithMany("Leads")
                        .HasForeignKey("MarketerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("Lead")
                        .HasForeignKey("AgencyPro.Domain.Entities.Lead", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("Leads")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("Leads")
                        .HasForeignKey("AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationMarketer", "OrganizationMarketer")
                        .WithMany("Leads")
                        .HasForeignKey("MarketerOrganizationId", "MarketerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountManager");

                    b.Navigation("Marketer");

                    b.Navigation("MarketerOrganization");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationMarketer");

                    b.Navigation("Person");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.LeadNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Lead", "Lead")
                        .WithMany("LeadNotifications")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Level", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Position", "Position")
                        .WithMany("Levels")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Marketer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("Marketer")
                        .HasForeignKey("AgencyPro.Domain.Entities.Marketer", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.MarketingAgreement", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.MarketingOrganization", "MarketingOrganization")
                        .WithMany("MarketingAgreements")
                        .HasForeignKey("MarketingOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("MarketingAgreements")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MarketingOrganization");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.MarketingOrganization", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("MarketingOrganization")
                        .HasForeignKey("AgencyPro.Domain.Entities.MarketingOrganization", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationMarketer", "DefaultOrganizationMarketer")
                        .WithMany("OrganizationDefaults")
                        .HasForeignKey("Id", "DefaultMarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultOrganizationMarketer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Organization", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Category", "Category")
                        .WithMany("Organizations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("OwnedAgencies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationAccountManager", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("OrganizationAccountManagers")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("AccountManagers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithOne("AccountManager")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountManager");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationBillingCategory", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BillingCategory", "BillingCategory")
                        .WithMany("OrganizationBillingCategories")
                        .HasForeignKey("BillingCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("BillingCategories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillingCategory");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationBonusIntent", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Candidate", "Candidate")
                        .WithOne("OrganizationBonusIntent")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationBonusIntent", "CandidateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Lead", "Lead")
                        .WithOne("OrganizationBonusIntent")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationBonusIntent", "LeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("BonusIntents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.BonusTransfer", "BonusTransfer")
                        .WithMany("OrganizationBonusIntents")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BonusTransfer");

                    b.Navigation("Candidate");

                    b.Navigation("Lead");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationBuyerAccount", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "BuyerAccount")
                        .WithOne("OrganizationBuyerAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationBuyerAccount", "BuyerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("OrganizationBuyerAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationBuyerAccount", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerAccount");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationContractor", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Contractor", "Contractor")
                        .WithMany("OrganizationContractors")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Level", "Level")
                        .WithMany("Contractors")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("Contractors")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Position", "Position")
                        .WithMany("Contractors")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithOne("Contractor")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationContractor", "OrganizationId", "ContractorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Level");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationCustomer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("OrganizationCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("Customers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithOne("Customer")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationFinancialAccount", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.FinancialAccount", "FinancialAccount")
                        .WithOne("OrganizationFinancialAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationFinancialAccount", "FinancialAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("OrganizationFinancialAccount")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationFinancialAccount", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationMarketer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Marketer", "Marketer")
                        .WithMany("OrganizationMarketers")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("Marketers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithOne("Marketer")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationMarketer", "OrganizationId", "MarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Marketer");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPaymentTerm", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("PaymentTerms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany("OrganizationPaymentTerms")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPayoutIntent", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithMany("OrganizationPayoutIntents")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoiceItem", "InvoiceItem")
                        .WithMany("OrganizationPayoutIntents")
                        .HasForeignKey("InvoiceItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.InvoiceTransfer", "InvoiceTransfer")
                        .WithMany("OrganizationPayoutIntents")
                        .HasForeignKey("InvoiceTransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("PayoutIntents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceItem");

                    b.Navigation("InvoiceTransfer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPerson", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("OrganizationPeople")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithMany("OrganizationPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPosition", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("Positions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Position", "Position")
                        .WithMany("Organizations")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationProjectManager", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("ProjectManagers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.ProjectManager", "ProjectManager")
                        .WithMany("OrganizationProjectManagers")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithOne("ProjectManager")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationProjectManager", "OrganizationId", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationRecruiter", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("Recruiters")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Recruiter", "Recruiter")
                        .WithMany("OrganizationRecruiters")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationPerson", "OrganizationPerson")
                        .WithOne("Recruiter")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationRecruiter", "OrganizationId", "RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Organization");

                    b.Navigation("OrganizationPerson");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationSetting", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithMany("OrganizationSettings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationSkill", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "Organization")
                        .WithMany("Skills")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Skill", "Skill")
                        .WithMany("OrganizationSkill")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationSubscription", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("OrganizationSubscription")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationSubscription", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.StripeSubscription", "StripeSubscription")
                        .WithOne("OrganizationSubscription")
                        .HasForeignKey("AgencyPro.Domain.Entities.OrganizationSubscription", "StripeSubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("StripeSubscription");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Person", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("AgencyPro.Domain.Entities.Person", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.PersonNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.PremiumOrganization", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("PremiumOrganization")
                        .HasForeignKey("AgencyPro.Domain.Entities.PremiumOrganization", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Project", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("Projects")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "BuyerOrganization")
                        .WithMany("BuyerProjects")
                        .HasForeignKey("BuyerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.ProjectManager", "ProjectManager")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectManagerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("Projects")
                        .HasForeignKey("AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationProjectManager", "OrganizationProjectManager")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectManagerOrganizationId", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountManager");

                    b.Navigation("BuyerOrganization");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAccount");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("OrganizationProjectManager");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectBillingCategory", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BillingCategory", "BillingCategory")
                        .WithMany("ProjectBillingCategories")
                        .HasForeignKey("BillingCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("ProjectBillingCategories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillingCategory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectInvoice", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "BuyerOrganization")
                        .WithMany("BuyerInvoices")
                        .HasForeignKey("BuyerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithOne("ProjectInvoice")
                        .HasForeignKey("AgencyPro.Domain.Entities.ProjectInvoice", "InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("Invoices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.ProjectManager", "ProjectManager")
                        .WithMany("Invoices")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "ProviderOrganization")
                        .WithMany("ProviderInvoices")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("Invoices")
                        .HasForeignKey("ProviderOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationProjectManager", "OrganizationProjectManager")
                        .WithMany("Invoices")
                        .HasForeignKey("ProviderOrganizationId", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerOrganizationId", "CustomerId", "ProviderOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountManager");

                    b.Navigation("BuyerOrganization");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAccount");

                    b.Navigation("Invoice");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("OrganizationProjectManager");

                    b.Navigation("Project");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectInvoiceAdditionalExpense", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.ProjectInvoice", "ProjectInvoice")
                        .WithMany("AdditionalExpenses")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProjectInvoice");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectManager", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("ProjectManager")
                        .HasForeignKey("AgencyPro.Domain.Entities.ProjectManager", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectRetainerIntent", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("RetainerIntents")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("RetainerIntents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "CustomerOrganization")
                        .WithMany("BuyerRetainerIntents")
                        .HasForeignKey("CustomerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithOne("ProjectRetainerIntent")
                        .HasForeignKey("AgencyPro.Domain.Entities.ProjectRetainerIntent", "ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "ProviderOrganization")
                        .WithMany("ProviderRetainerIntents")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("RetainerIntents")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("RetainerIntents")
                        .HasForeignKey("ProviderOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("RetainerIntents")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId", "ProviderOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountManager");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAccount");

                    b.Navigation("CustomerOrganization");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("Project");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProposalAcceptance", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("ProposalsAccepted")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.FixedPriceProposal", "Proposal")
                        .WithOne("ProposalAcceptance")
                        .HasForeignKey("AgencyPro.Domain.Entities.ProposalAcceptance", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("ProposalsAccepted")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProposalNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.FixedPriceProposal", "Proposal")
                        .WithMany("Notifications")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProposalWorkOrder", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.FixedPriceProposal", "Proposal")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("Proposals")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProviderOrganization", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("ProviderOrganization")
                        .HasForeignKey("AgencyPro.Domain.Entities.ProviderOrganization", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "DefaultAccountManager")
                        .WithMany("DefaultOrganizations")
                        .HasForeignKey("Id", "DefaultAccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationContractor", "DefaultContractor")
                        .WithMany("DefaultOrganizations")
                        .HasForeignKey("Id", "DefaultContractorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationProjectManager", "DefaultProjectManager")
                        .WithMany("DefaultOrganizations")
                        .HasForeignKey("Id", "DefaultProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultAccountManager");

                    b.Navigation("DefaultContractor");

                    b.Navigation("DefaultProjectManager");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Recruiter", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Person", "Person")
                        .WithOne("Recruiter")
                        .HasForeignKey("AgencyPro.Domain.Entities.Recruiter", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.RecruitingAgreement", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("RecruitingAgreements")
                        .HasForeignKey("ProviderOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.RecruitingOrganization", "RecruitingOrganization")
                        .WithMany("RecruitingAgreements")
                        .HasForeignKey("RecruitingOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProviderOrganization");

                    b.Navigation("RecruitingOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.RecruitingOrganization", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Organization", "Organization")
                        .WithOne("RecruitingOrganization")
                        .HasForeignKey("AgencyPro.Domain.Entities.RecruitingOrganization", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationRecruiter", "DefaultOrganizationRecruiter")
                        .WithMany("RecruitingOrganizationDefaults")
                        .HasForeignKey("Id", "DefaultRecruiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultOrganizationRecruiter");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ServiceAgreement", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithOne("ServiceAgreement")
                        .HasForeignKey("AgencyPro.Domain.Entities.ServiceAgreement", "CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Story", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Contractor", "Contractor")
                        .WithMany("Stories")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("Stories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationContractor", "OrganizationContractor")
                        .WithMany("Stories")
                        .HasForeignKey("ContractorOrganizationId", "ContractorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contractor");

                    b.Navigation("OrganizationContractor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StoryNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Story", "Story")
                        .WithMany("Notifications")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeBalanceTransaction", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripePayout", "Payout")
                        .WithMany("BalanceTransactions")
                        .HasForeignKey("PayoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Payout");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeCharge", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "Customer")
                        .WithMany("Charges")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.FinancialAccount", "Destination")
                        .WithMany("DestinationCharges")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithMany("Charges")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripePaymentIntent", "PaymentIntent")
                        .WithMany("Charges")
                        .HasForeignKey("PaymentIntentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.ProjectRetainerIntent", "RetainerIntent")
                        .WithMany("Credits")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Destination");

                    b.Navigation("Invoice");

                    b.Navigation("PaymentIntent");

                    b.Navigation("RetainerIntent");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeCheckoutSession", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "Customer")
                        .WithMany("CheckoutSessions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoice", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "BuyerAccount")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.StripeSubscription", "SubscriptionInvoice")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerAccount");

                    b.Navigation("SubscriptionInvoice");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoiceItem", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.Contract", "Contract")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "Customer")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoiceLine", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoiceItem", "InvoiceItem")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripePaymentIntent", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoice", "StripeInvoice")
                        .WithOne("PaymentIntent")
                        .HasForeignKey("AgencyPro.Domain.Entities.StripePaymentIntent", "InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StripeInvoice");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeSource", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.BuyerAccount", "Customer")
                        .WithMany("PaymentSources")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeSubscriptionItem", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.StripeSubscription", "Subscription")
                        .WithMany("Items")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeTransfer", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.FinancialAccount", "DestinationAccount")
                        .WithMany("Transfers")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationAccount");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.TimeEntry", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("TimeEntries")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Contract", "Contract")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Contractor", "Contractor")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("BuyerTimeEntries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.StripeInvoiceItem", "InvoiceItem")
                        .WithMany("TimeEntries")
                        .HasForeignKey("InvoiceItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Marketer", "Marketer")
                        .WithMany("TimeEntries")
                        .HasForeignKey("MarketerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "MarketingAgencyOwner")
                        .WithMany("MarketingTimeEntries")
                        .HasForeignKey("MarketingAgencyOwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Project", "Project")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProjectManager", "ProjectManager")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "ProviderAgencyOwner")
                        .WithMany("ProviderTimeEntries")
                        .HasForeignKey("ProviderAgencyOwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Recruiter", "Recruiter")
                        .WithMany("TimeEntries")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "RecruitingAgencyOwner")
                        .WithMany("RecruitingTimeEntries")
                        .HasForeignKey("RecruitingAgencyOwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.Story", "Story")
                        .WithMany("TimeEntries")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.BillingCategory", "BillingCategory")
                        .WithMany("TimeEntries")
                        .HasForeignKey("TimeType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationCustomer", "OrganizationCustomer")
                        .WithMany("TimeEntries")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationMarketer", "OrganizationMarketer")
                        .WithMany("TimeEntries")
                        .HasForeignKey("MarketingOrganizationId", "MarketerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProviderOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationContractor", "OrganizationContractor")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProviderOrganizationId", "ContractorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationProjectManager", "OrganizationProjectManager")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProviderOrganizationId", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationRecruiter", "OrganizationRecruiter")
                        .WithMany("TimeEntries")
                        .HasForeignKey("RecruitingOrganizationId", "RecruiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountManager");

                    b.Navigation("BillingCategory");

                    b.Navigation("Contract");

                    b.Navigation("Contractor");

                    b.Navigation("Customer");

                    b.Navigation("InvoiceItem");

                    b.Navigation("Marketer");

                    b.Navigation("MarketingAgencyOwner");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("OrganizationContractor");

                    b.Navigation("OrganizationCustomer");

                    b.Navigation("OrganizationMarketer");

                    b.Navigation("OrganizationProjectManager");

                    b.Navigation("OrganizationRecruiter");

                    b.Navigation("Project");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProviderAgencyOwner");

                    b.Navigation("Recruiter");

                    b.Navigation("RecruitingAgencyOwner");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.TimeEntryNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.TimeEntry", "TimeEntry")
                        .WithMany()
                        .HasForeignKey("TimeEntryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TimeEntry");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.WorkOrder", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.AccountManager", "AccountManager")
                        .WithMany("WorkOrders")
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.ProviderOrganization", "ProviderOrganization")
                        .WithMany("WorkOrders")
                        .HasForeignKey("AccountManagerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Organization", "BuyerOrganization")
                        .WithMany("BuyerWorkOrders")
                        .HasForeignKey("BuyerOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.Customer", "Customer")
                        .WithMany("WorkOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgencyPro.Domain.Entities.OrganizationAccountManager", "OrganizationAccountManager")
                        .WithMany("WorkOrders")
                        .HasForeignKey("AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgencyPro.Domain.Entities.CustomerAccount", "CustomerAccount")
                        .WithMany("WorkOrders")
                        .HasForeignKey("CustomerOrganizationId", "CustomerId", "AccountManagerOrganizationId", "AccountManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountManager");

                    b.Navigation("BuyerOrganization");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAccount");

                    b.Navigation("OrganizationAccountManager");

                    b.Navigation("ProviderOrganization");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.WorkOrderNotification", b =>
                {
                    b.HasOne("AgencyPro.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderNotifications")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.AccountManager", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("CustomerAccounts");

                    b.Navigation("Invoices");

                    b.Navigation("Leads");

                    b.Navigation("OrganizationAccountManagers");

                    b.Navigation("Projects");

                    b.Navigation("RetainerIntents");

                    b.Navigation("TimeEntries");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BillingCategory", b =>
                {
                    b.Navigation("CategoryBillingCategories");

                    b.Navigation("OrganizationBillingCategories");

                    b.Navigation("ProjectBillingCategories");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BonusTransfer", b =>
                {
                    b.Navigation("IndividualBonusIntents");

                    b.Navigation("OrganizationBonusIntents");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.BuyerAccount", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Charges");

                    b.Navigation("CheckoutSessions");

                    b.Navigation("IndividualBuyerAccount")
                        .IsRequired();

                    b.Navigation("InvoiceItems");

                    b.Navigation("Invoices");

                    b.Navigation("OrganizationBuyerAccount")
                        .IsRequired();

                    b.Navigation("PaymentSources");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateNotifications");

                    b.Navigation("Comments");

                    b.Navigation("IndividualBonusIntent")
                        .IsRequired();

                    b.Navigation("OrganizationBonusIntent")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Category", b =>
                {
                    b.Navigation("AvailableBillingCategories");

                    b.Navigation("AvailablePaymentTerms");

                    b.Navigation("AvailableSkills");

                    b.Navigation("Organizations");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Contract", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InvoiceItems");

                    b.Navigation("Notifications");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Contractor", b =>
                {
                    b.Navigation("ContractorSkills");

                    b.Navigation("Contracts");

                    b.Navigation("OrganizationContractors");

                    b.Navigation("Stories");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Customer", b =>
                {
                    b.Navigation("BuyerAccount")
                        .IsRequired();

                    b.Navigation("BuyerTimeEntries");

                    b.Navigation("Cards");

                    b.Navigation("Contracts");

                    b.Navigation("CustomerAccounts");

                    b.Navigation("Invoices");

                    b.Navigation("MarketingTimeEntries");

                    b.Navigation("OrganizationCustomers");

                    b.Navigation("OwnedAgencies");

                    b.Navigation("Projects");

                    b.Navigation("ProposalsAccepted");

                    b.Navigation("ProviderTimeEntries");

                    b.Navigation("RecruitingTimeEntries");

                    b.Navigation("RetainerIntents");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.CustomerAccount", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contracts");

                    b.Navigation("Invoices");

                    b.Navigation("Projects");

                    b.Navigation("RetainerIntents");

                    b.Navigation("ServiceAgreement")
                        .IsRequired();

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.FinancialAccount", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("DestinationCharges");

                    b.Navigation("IndividualFinancialAccount")
                        .IsRequired();

                    b.Navigation("OrganizationFinancialAccount")
                        .IsRequired();

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.FixedPriceProposal", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("ProposalAcceptance")
                        .IsRequired();

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.InvoiceTransfer", b =>
                {
                    b.Navigation("IndividualPayoutIntents");

                    b.Navigation("OrganizationPayoutIntents");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Lead", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IndividualBonusIntent")
                        .IsRequired();

                    b.Navigation("LeadNotifications");

                    b.Navigation("OrganizationBonusIntent")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Level", b =>
                {
                    b.Navigation("Contractors");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Marketer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Leads");

                    b.Navigation("OrganizationMarketers");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.MarketingOrganization", b =>
                {
                    b.Navigation("MarketerContracts");

                    b.Navigation("MarketingAgreements");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Organization", b =>
                {
                    b.Navigation("AccountManagers");

                    b.Navigation("BillingCategories");

                    b.Navigation("BonusIntents");

                    b.Navigation("BuyerContracts");

                    b.Navigation("BuyerCustomerAccounts");

                    b.Navigation("BuyerInvoices");

                    b.Navigation("BuyerProjects");

                    b.Navigation("BuyerRetainerIntents");

                    b.Navigation("BuyerWorkOrders");

                    b.Navigation("Candidates");

                    b.Navigation("Contractors");

                    b.Navigation("Customers");

                    b.Navigation("IndividualPayoutIntents");

                    b.Navigation("Leads");

                    b.Navigation("Marketers");

                    b.Navigation("MarketingOrganization")
                        .IsRequired();

                    b.Navigation("OrganizationBuyerAccount")
                        .IsRequired();

                    b.Navigation("OrganizationFinancialAccount")
                        .IsRequired();

                    b.Navigation("OrganizationPeople");

                    b.Navigation("OrganizationSettings");

                    b.Navigation("OrganizationSubscription")
                        .IsRequired();

                    b.Navigation("PaymentTerms");

                    b.Navigation("PayoutIntents");

                    b.Navigation("Positions");

                    b.Navigation("PremiumOrganization")
                        .IsRequired();

                    b.Navigation("ProjectManagers");

                    b.Navigation("ProviderInvoices");

                    b.Navigation("ProviderOrganization")
                        .IsRequired();

                    b.Navigation("ProviderRetainerIntents");

                    b.Navigation("Recruiters");

                    b.Navigation("RecruitingOrganization")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationAccountManager", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Contracts");

                    b.Navigation("DefaultOrganizations");

                    b.Navigation("Invoices");

                    b.Navigation("Leads");

                    b.Navigation("Projects");

                    b.Navigation("RetainerIntents");

                    b.Navigation("TimeEntries");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationContractor", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DefaultOrganizations");

                    b.Navigation("Stories");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationCustomer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Contracts");

                    b.Navigation("Invoices");

                    b.Navigation("Projects");

                    b.Navigation("ProposalsAccepted");

                    b.Navigation("RetainerIntents");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationMarketer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Customers");

                    b.Navigation("Leads");

                    b.Navigation("OrganizationDefaults");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationPerson", b =>
                {
                    b.Navigation("AccountManager")
                        .IsRequired();

                    b.Navigation("BonusIntents");

                    b.Navigation("Comments");

                    b.Navigation("Contractor")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Marketer")
                        .IsRequired();

                    b.Navigation("Payouts");

                    b.Navigation("ProjectManager")
                        .IsRequired();

                    b.Navigation("Recruiter")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationProjectManager", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Contracts");

                    b.Navigation("DefaultOrganizations");

                    b.Navigation("Invoices");

                    b.Navigation("Projects");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.OrganizationRecruiter", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Contractors");

                    b.Navigation("Contracts");

                    b.Navigation("RecruitingOrganizationDefaults");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.PaymentTerm", b =>
                {
                    b.Navigation("CategoryPaymentTerms");

                    b.Navigation("CustomerAccounts");

                    b.Navigation("OrganizationPaymentTerms");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Person", b =>
                {
                    b.Navigation("AccountManager")
                        .IsRequired();

                    b.Navigation("BonusIntents");

                    b.Navigation("Contractor")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("IndividualFinancialAccount")
                        .IsRequired();

                    b.Navigation("Lead")
                        .IsRequired();

                    b.Navigation("Marketer")
                        .IsRequired();

                    b.Navigation("OrganizationPeople");

                    b.Navigation("PayoutIntents");

                    b.Navigation("PersonNotifications");

                    b.Navigation("ProjectManager")
                        .IsRequired();

                    b.Navigation("Recruiter")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Position", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Contractors");

                    b.Navigation("Levels");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Project", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contracts");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectBillingCategories");

                    b.Navigation("ProjectRetainerIntent")
                        .IsRequired();

                    b.Navigation("Proposal")
                        .IsRequired();

                    b.Navigation("Stories");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectInvoice", b =>
                {
                    b.Navigation("AdditionalExpenses");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectManager", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Contracts");

                    b.Navigation("Invoices");

                    b.Navigation("OrganizationProjectManagers");

                    b.Navigation("Projects");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProjectRetainerIntent", b =>
                {
                    b.Navigation("Credits");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.ProviderOrganization", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Contracts");

                    b.Navigation("CustomerAccounts");

                    b.Navigation("Leads");

                    b.Navigation("MarketingAgreements");

                    b.Navigation("Projects");

                    b.Navigation("RecruitingAgreements");

                    b.Navigation("Skills");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Recruiter", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Contractors");

                    b.Navigation("Contracts");

                    b.Navigation("OrganizationRecruiters");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.RecruitingOrganization", b =>
                {
                    b.Navigation("RecruiterContracts");

                    b.Navigation("RecruitingAgreements");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Skill", b =>
                {
                    b.Navigation("ContractorSkills");

                    b.Navigation("OrganizationSkill");

                    b.Navigation("SkillCategories");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.Story", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeCard", b =>
                {
                    b.Navigation("AccountCard")
                        .IsRequired();

                    b.Navigation("CustomerCard")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoice", b =>
                {
                    b.Navigation("Charges");

                    b.Navigation("IndividualPayoutIntents");

                    b.Navigation("InvoiceTransfers");

                    b.Navigation("Items");

                    b.Navigation("Lines");

                    b.Navigation("OrganizationPayoutIntents");

                    b.Navigation("PaymentIntent")
                        .IsRequired();

                    b.Navigation("ProjectInvoice")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeInvoiceItem", b =>
                {
                    b.Navigation("IndividualPayoutIntents");

                    b.Navigation("InvoiceLines");

                    b.Navigation("OrganizationPayoutIntents");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripePaymentIntent", b =>
                {
                    b.Navigation("Charges");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripePayout", b =>
                {
                    b.Navigation("BalanceTransactions");
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeSubscription", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Items");

                    b.Navigation("OrganizationSubscription")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.StripeTransfer", b =>
                {
                    b.Navigation("BonusTransfer")
                        .IsRequired();

                    b.Navigation("InvoiceTransfer")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyPro.Domain.Entities.WorkOrder", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("WorkOrderNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
