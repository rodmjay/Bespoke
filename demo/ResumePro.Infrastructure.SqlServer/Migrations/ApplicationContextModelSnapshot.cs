// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResumePro.Data.Contexts;

#nullable disable

namespace ResumePro.Infrastructure.SqlServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResumePro.Domain.Entities.Certification", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("OrganizationId", "PersonId");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Company", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId", "PersonId", "Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.CompanySkill", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "PersonId", "CompanyId", "SkillId");

                    b.HasIndex("OrganizationId", "CompanyId");

                    b.HasIndex("OrganizationId", "PersonId", "SkillId");

                    b.ToTable("CompanySkill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Iso2")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CapsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("NumberCode")
                        .HasColumnType("int");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("int");

                    b.HasKey("Iso2");

                    b.HasIndex("Iso2");

                    b.HasIndex("Iso3");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Degree", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("OrganizationId", "SchoolId");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Highlight", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.HasKey("OrganizationId", "PersonId", "CompanyId", "PositionId", "Id");

                    b.ToTable("Highlight");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Language", b =>
                {
                    b.Property<string>("Code3")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code3");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.OrganizationSettings", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<bool>("AttachAllJobs")
                        .HasColumnType("bit");

                    b.Property<bool>("AttachAllSkills")
                        .HasColumnType("bit");

                    b.Property<int>("DefaultTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeYearHistory")
                        .HasColumnType("int");

                    b.Property<bool>("ShowContactInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowDuration")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRatings")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowTechnologyPerJob")
                        .HasColumnType("bit");

                    b.Property<int>("SkillView")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId");

                    b.ToTable("OrganizationSettings");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Persona", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("GitHub")
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("StateId");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.PersonaLanguage", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Code3")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Proficiency")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "PersonId", "Code3");

                    b.HasIndex("Code3");

                    b.ToTable("PersonaLanguage");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.PersonaSkill", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "PersonId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("PersonaSkill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Position", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId", "PersonId", "CompanyId", "Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Project", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "PersonId", "CompanyId", "PositionId", "Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ProjectHighlight", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "PersonId", "CompanyId", "PositionId", "ProjectId", "Id");

                    b.ToTable("ProjectHighlight");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Rendering", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RenderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrganizationId", "ResumeId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Rendering");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Resume", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.ToTable("Resume");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ResumeCompany", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "ResumeId", "CompanyId");

                    b.HasIndex("OrganizationId", "CompanyId");

                    b.ToTable("ResumeCompany");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ResumeSettings", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<bool?>("AttachAllJobs")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttachAllSkills")
                        .HasColumnType("bit");

                    b.Property<int?>("DefaultTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("ResumeYearHistory")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowContactInfo")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowDuration")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowRatings")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowTechnologyPerJob")
                        .HasColumnType("bit");

                    b.Property<int?>("SkillView")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "ResumeId");

                    b.HasIndex("DefaultTemplateId");

                    b.ToTable("ResumeSettings");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ResumeSkill", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "PersonId", "ResumeId", "SkillId");

                    b.HasIndex("OrganizationId", "PersonId", "SkillId");

                    b.ToTable("ResumeSkill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.School", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("OrganizationId", "PersonId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Sequence", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId");

                    b.ToTable("Sequence");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.SkillCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillCategory");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.SkillCategorySkill", b =>
                {
                    b.Property<int>("SkillCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("SkillCategoryId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillCategorySkill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbrev")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Iso2");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("ResumePro.Entities.Reference", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.HasKey("OrganizationId", "PersonId", "Id");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Certification", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("Certifications")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Company", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("Companies")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.CompanySkill", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Company", "Company")
                        .WithMany("Skills")
                        .HasForeignKey("OrganizationId", "CompanyId")
                        .HasPrincipalKey("OrganizationId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.PersonaSkill", "Skill")
                        .WithMany("Jobs")
                        .HasForeignKey("OrganizationId", "PersonId", "SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Degree", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.School", "School")
                        .WithMany("Degrees")
                        .HasForeignKey("OrganizationId", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Highlight", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Persona", "Person")
                        .WithMany("Highlights")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Company", "Company")
                        .WithMany("Highlights")
                        .HasForeignKey("OrganizationId", "PersonId", "CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Position", "Position")
                        .WithMany("Highlights")
                        .HasForeignKey("OrganizationId", "PersonId", "CompanyId", "PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Persona", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.StateProvince", "State")
                        .WithMany("People")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.PersonaLanguage", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Language", "Language")
                        .WithMany("People")
                        .HasForeignKey("Code3")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("Languages")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.PersonaSkill", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Skill", "Skill")
                        .WithMany("Personas")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("Skills")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Position", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("OrganizationId", "PersonId", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Project", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId", "PersonId", "CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Position", "Position")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId", "PersonId", "CompanyId", "PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ProjectHighlight", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Project", "Project")
                        .WithMany("Highlights")
                        .HasForeignKey("OrganizationId", "PersonId", "CompanyId", "PositionId", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Rendering", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Template", "Template")
                        .WithMany("Renderings")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Resume", "Resume")
                        .WithMany("Renderings")
                        .HasForeignKey("OrganizationId", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Resume", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("Resumes")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ResumeCompany", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Company", "Company")
                        .WithMany("Resumes")
                        .HasForeignKey("OrganizationId", "CompanyId")
                        .HasPrincipalKey("OrganizationId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Resume", "Resume")
                        .WithMany("Companies")
                        .HasForeignKey("OrganizationId", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ResumeSettings", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Template", "Template")
                        .WithMany("Resumes")
                        .HasForeignKey("DefaultTemplateId");

                    b.HasOne("ResumePro.Domain.Entities.OrganizationSettings", "OrganizationSettings")
                        .WithMany("ResumeSettings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Resume", "Resume")
                        .WithOne("ResumeSettings")
                        .HasForeignKey("ResumePro.Domain.Entities.ResumeSettings", "OrganizationId", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationSettings");

                    b.Navigation("Resume");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.ResumeSkill", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Resume", "Resume")
                        .WithMany("Skills")
                        .HasForeignKey("OrganizationId", "PersonId", "ResumeId")
                        .HasPrincipalKey("OrganizationId", "PersonId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.PersonaSkill", "Skill")
                        .WithMany("Resumes")
                        .HasForeignKey("OrganizationId", "PersonId", "SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.School", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("Schools")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.SkillCategorySkill", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.SkillCategory", "SkillCategory")
                        .WithMany("Skills")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumePro.Domain.Entities.Skill", "Skill")
                        .WithMany("Categories")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.StateProvince", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("Iso2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ResumePro.Entities.Reference", b =>
                {
                    b.HasOne("ResumePro.Domain.Entities.Persona", "Persona")
                        .WithMany("References")
                        .HasForeignKey("OrganizationId", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Company", b =>
                {
                    b.Navigation("Highlights");

                    b.Navigation("Positions");

                    b.Navigation("Projects");

                    b.Navigation("Resumes");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Country", b =>
                {
                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Language", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.OrganizationSettings", b =>
                {
                    b.Navigation("ResumeSettings");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Persona", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Companies");

                    b.Navigation("Highlights");

                    b.Navigation("Languages");

                    b.Navigation("References");

                    b.Navigation("Resumes");

                    b.Navigation("Schools");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.PersonaSkill", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Resumes");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Position", b =>
                {
                    b.Navigation("Highlights");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Project", b =>
                {
                    b.Navigation("Highlights");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Resume", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Renderings");

                    b.Navigation("ResumeSettings")
                        .IsRequired();

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.School", b =>
                {
                    b.Navigation("Degrees");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Skill", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.SkillCategory", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.StateProvince", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("ResumePro.Domain.Entities.Template", b =>
                {
                    b.Navigation("Renderings");

                    b.Navigation("Resumes");
                });
#pragma warning restore 612, 618
        }
    }
}
